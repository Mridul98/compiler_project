
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENTOPS BOOLTYPE COMMA DECOPS DIV DIVEQUAL DOUBLETYPE ELSE EQUALEQUAL FLOATTYPE FUNCDEF GREATERTHAN GREATERTHANEQUAL IF INCOPS INTTYPE LBRACKET LCURLY LESSTHAN LESSTHANEQUAL LOGICANDOPS LOGICNOTOPS LOGICOROPS MINUS MINUSEQUAL MOD MUL MULEQUAL NOTEQUAL NUMBER PLUS PLUSEQUAL RBRACKET RCURLY RETURNTYPE SEMICOLON VOIDTYPE\n    function : type FUNCDEF LBRACKET RBRACKET LCURLY statements RCURLY\n    \n    statements : statements allstatement\n    \n    statements : empty\n    \n    allstatement : statement\n                 \n    \n    allstatement : condstatement\n    \n    allstatement : returnstatement\n    \n    returnstatement : RETURNTYPE simpleExpression SEMICOLON\n    \n    condstatement : IF LBRACKET simpleExpression RBRACKET LCURLY ifstart statements ifend RCURLY\n                  \n    \n    condstatement : IF LBRACKET simpleExpression RBRACKET LCURLY ifstart statements ifend RCURLY ELSE LCURLY elsestart statements elseend RCURLY\n                  \n    \n    statement : FUNCDEF ASSIGNMENTOPS expression SEMICOLON\n    \n    statement : type FUNCDEF ASSIGNMENTOPS expression SEMICOLON\n    \n    statement : type FUNCDEF SEMICOLON\n    \n    statement : type FUNCDEF ASSIGNMENTOPS FUNCDEF SEMICOLON       \n    \n    statement : FUNCDEF hybridEqual expression SEMICOLON\n    \n    hybridEqual : PLUSEQUAL\n                | MINUSEQUAL\n                | DIVEQUAL\n                | MULEQUAL\n    \n    simpleExpression : simpleExpression LOGICOROPS andExpression\n    \n    simpleExpression : andExpression\n    \n    andExpression : andExpression LOGICANDOPS relExpression\n    \n    andExpression : relExpression\n    \n    relExpression : expression GREATERTHAN expression\n    \n    relExpression : expression GREATERTHANEQUAL expression\n    \n    relExpression : expression LESSTHAN expression\n    \n    relExpression : expression LESSTHANEQUAL expression\n    \n    relExpression : expression EQUALEQUAL expression\n    \n    relExpression : expression  NOTEQUAL expression\n    \n    relExpression : expression\n    \n    expression : expression PLUS terms\n    \n    expression : expression MINUS terms\n    \n    expression : terms\n    \n    terms : terms MUL factor\n    \n    terms : terms DIV factor\n          \n    \n    terms : terms MOD factor\n    \n    terms : factor\n    \n    factor : NUMBER\n    \n    factor : FUNCDEF\n    factor : LBRACKET expression RBRACKET\n    \n    type : INTTYPE \n         | FLOATTYPE\n         | DOUBLETYPE\n         | VOIDTYPE\n         | BOOLTYPE\n    empty :ifstart : emptyifend : emptyelsestart : emptyelseend : empty'
    
_lr_action_items = {'INTTYPE':([0,11,12,13,17,18,19,20,41,45,62,63,79,80,81,82,83,84,87,89,90,91,92,95,],[3,-45,3,-3,-2,-4,-5,-6,-12,-7,-10,-14,-13,-11,-45,-45,-46,3,-8,-45,-45,-48,3,-9,]),'FLOATTYPE':([0,11,12,13,17,18,19,20,41,45,62,63,79,80,81,82,83,84,87,89,90,91,92,95,],[4,-45,4,-3,-2,-4,-5,-6,-12,-7,-10,-14,-13,-11,-45,-45,-46,4,-8,-45,-45,-48,4,-9,]),'DOUBLETYPE':([0,11,12,13,17,18,19,20,41,45,62,63,79,80,81,82,83,84,87,89,90,91,92,95,],[5,-45,5,-3,-2,-4,-5,-6,-12,-7,-10,-14,-13,-11,-45,-45,-46,5,-8,-45,-45,-48,5,-9,]),'VOIDTYPE':([0,11,12,13,17,18,19,20,41,45,62,63,79,80,81,82,83,84,87,89,90,91,92,95,],[6,-45,6,-3,-2,-4,-5,-6,-12,-7,-10,-14,-13,-11,-45,-45,-46,6,-8,-45,-45,-48,6,-9,]),'BOOLTYPE':([0,11,12,13,17,18,19,20,41,45,62,63,79,80,81,82,83,84,87,89,90,91,92,95,],[7,-45,7,-3,-2,-4,-5,-6,-12,-7,-10,-14,-13,-11,-45,-45,-46,7,-8,-45,-45,-48,7,-9,]),'$end':([1,16,],[0,-1,]),'FUNCDEF':([2,3,4,5,6,7,11,12,13,14,17,18,19,20,22,24,25,26,27,28,29,30,39,40,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,79,80,81,82,83,84,87,89,90,91,92,95,],[8,-40,-41,-42,-43,-44,-45,15,-3,23,-2,-4,-5,-6,38,38,38,-15,-16,-17,-18,38,38,60,-12,-7,38,38,38,38,38,38,38,38,38,38,38,38,38,-10,-14,-13,-11,-45,-45,-46,15,-8,-45,-45,-48,15,-9,]),'LBRACKET':([8,21,22,24,25,26,27,28,29,30,39,40,46,47,48,49,50,51,52,53,54,55,56,57,58,],[9,30,39,39,39,-15,-16,-17,-18,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'RBRACKET':([9,32,33,34,35,36,37,38,44,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[10,-20,-22,-29,-32,-36,-37,-38,64,78,-19,-21,-23,-24,-25,-26,-27,-28,-30,-31,-33,-34,-35,-39,]),'LCURLY':([10,64,88,],[11,81,89,]),'RCURLY':([11,12,13,17,18,19,20,41,45,62,63,79,80,81,82,83,84,85,86,87,89,90,91,92,93,94,95,],[-45,16,-3,-2,-4,-5,-6,-12,-7,-10,-14,-13,-11,-45,-45,-46,-45,87,-47,-8,-45,-45,-48,-45,95,-49,-9,]),'IF':([11,12,13,17,18,19,20,41,45,62,63,79,80,81,82,83,84,87,89,90,91,92,95,],[-45,21,-3,-2,-4,-5,-6,-12,-7,-10,-14,-13,-11,-45,-45,-46,21,-8,-45,-45,-48,21,-9,]),'RETURNTYPE':([11,12,13,17,18,19,20,41,45,62,63,79,80,81,82,83,84,87,89,90,91,92,95,],[-45,22,-3,-2,-4,-5,-6,-12,-7,-10,-14,-13,-11,-45,-45,-46,22,-8,-45,-45,-48,22,-9,]),'ASSIGNMENTOPS':([15,23,],[24,40,]),'PLUSEQUAL':([15,],[26,]),'MINUSEQUAL':([15,],[27,]),'DIVEQUAL':([15,],[28,]),'MULEQUAL':([15,],[29,]),'NUMBER':([22,24,25,26,27,28,29,30,39,40,46,47,48,49,50,51,52,53,54,55,56,57,58,],[37,37,37,-15,-16,-17,-18,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'SEMICOLON':([23,31,32,33,34,35,36,37,38,42,43,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[41,45,-20,-22,-29,-32,-36,-37,-38,62,63,79,80,-19,-21,-23,-24,-25,-26,-27,-28,-30,-31,-33,-34,-35,-39,]),'LOGICOROPS':([31,32,33,34,35,36,37,38,44,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[46,-20,-22,-29,-32,-36,-37,-38,46,-19,-21,-23,-24,-25,-26,-27,-28,-30,-31,-33,-34,-35,-39,]),'LOGICANDOPS':([32,33,34,35,36,37,38,65,66,67,68,69,70,71,72,73,74,75,76,77,78,],[47,-22,-29,-32,-36,-37,-38,47,-21,-23,-24,-25,-26,-27,-28,-30,-31,-33,-34,-35,-39,]),'GREATERTHAN':([34,35,36,37,38,73,74,75,76,77,78,],[48,-32,-36,-37,-38,-30,-31,-33,-34,-35,-39,]),'GREATERTHANEQUAL':([34,35,36,37,38,73,74,75,76,77,78,],[49,-32,-36,-37,-38,-30,-31,-33,-34,-35,-39,]),'LESSTHAN':([34,35,36,37,38,73,74,75,76,77,78,],[50,-32,-36,-37,-38,-30,-31,-33,-34,-35,-39,]),'LESSTHANEQUAL':([34,35,36,37,38,73,74,75,76,77,78,],[51,-32,-36,-37,-38,-30,-31,-33,-34,-35,-39,]),'EQUALEQUAL':([34,35,36,37,38,73,74,75,76,77,78,],[52,-32,-36,-37,-38,-30,-31,-33,-34,-35,-39,]),'NOTEQUAL':([34,35,36,37,38,73,74,75,76,77,78,],[53,-32,-36,-37,-38,-30,-31,-33,-34,-35,-39,]),'PLUS':([34,35,36,37,38,42,43,59,60,61,67,68,69,70,71,72,73,74,75,76,77,78,],[54,-32,-36,-37,-38,54,54,54,-38,54,54,54,54,54,54,54,-30,-31,-33,-34,-35,-39,]),'MINUS':([34,35,36,37,38,42,43,59,60,61,67,68,69,70,71,72,73,74,75,76,77,78,],[55,-32,-36,-37,-38,55,55,55,-38,55,55,55,55,55,55,55,-30,-31,-33,-34,-35,-39,]),'MUL':([35,36,37,38,60,73,74,75,76,77,78,],[56,-36,-37,-38,-38,56,56,-33,-34,-35,-39,]),'DIV':([35,36,37,38,60,73,74,75,76,77,78,],[57,-36,-37,-38,-38,57,57,-33,-34,-35,-39,]),'MOD':([35,36,37,38,60,73,74,75,76,77,78,],[58,-36,-37,-38,-38,58,58,-33,-34,-35,-39,]),'ELSE':([87,],[88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function':([0,],[1,]),'type':([0,12,84,92,],[2,14,14,14,]),'statements':([11,82,90,],[12,84,92,]),'empty':([11,81,82,84,89,90,92,],[13,83,13,86,91,13,94,]),'allstatement':([12,84,92,],[17,17,17,]),'statement':([12,84,92,],[18,18,18,]),'condstatement':([12,84,92,],[19,19,19,]),'returnstatement':([12,84,92,],[20,20,20,]),'hybridEqual':([15,],[25,]),'simpleExpression':([22,30,],[31,44,]),'andExpression':([22,30,46,],[32,32,65,]),'relExpression':([22,30,46,47,],[33,33,33,66,]),'expression':([22,24,25,30,39,40,46,47,48,49,50,51,52,53,],[34,42,43,34,59,61,34,34,67,68,69,70,71,72,]),'terms':([22,24,25,30,39,40,46,47,48,49,50,51,52,53,54,55,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,73,74,]),'factor':([22,24,25,30,39,40,46,47,48,49,50,51,52,53,54,55,56,57,58,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,75,76,77,]),'ifstart':([81,],[82,]),'ifend':([84,],[85,]),'elsestart':([89,],[90,]),'elseend':([92,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> function","S'",1,None,None,None),
  ('function -> type FUNCDEF LBRACKET RBRACKET LCURLY statements RCURLY','function',7,'p_function','yacc_parser.py',11),
  ('statements -> statements allstatement','statements',2,'p_statements','yacc_parser.py',30),
  ('statements -> empty','statements',1,'p_statements_empty','yacc_parser.py',38),
  ('allstatement -> statement','allstatement',1,'p_allstatements_to_statement','yacc_parser.py',43),
  ('allstatement -> condstatement','allstatement',1,'p_allstatement_to_condstmt','yacc_parser.py',49),
  ('allstatement -> returnstatement','allstatement',1,'p_allstatement_to_returnstmt','yacc_parser.py',53),
  ('returnstatement -> RETURNTYPE simpleExpression SEMICOLON','returnstatement',3,'p_returnstmt','yacc_parser.py',61),
  ('condstatement -> IF LBRACKET simpleExpression RBRACKET LCURLY ifstart statements ifend RCURLY','condstatement',9,'p_condstatement','yacc_parser.py',76),
  ('condstatement -> IF LBRACKET simpleExpression RBRACKET LCURLY ifstart statements ifend RCURLY ELSE LCURLY elsestart statements elseend RCURLY','condstatement',15,'p_condstatement_withelse','yacc_parser.py',87),
  ('statement -> FUNCDEF ASSIGNMENTOPS expression SEMICOLON','statement',4,'p_statement','yacc_parser.py',99),
  ('statement -> type FUNCDEF ASSIGNMENTOPS expression SEMICOLON','statement',5,'p_statement_ressign','yacc_parser.py',121),
  ('statement -> type FUNCDEF SEMICOLON','statement',3,'p_statement_just_declare','yacc_parser.py',139),
  ('statement -> type FUNCDEF ASSIGNMENTOPS FUNCDEF SEMICOLON','statement',5,'p_statement_assign','yacc_parser.py',157),
  ('statement -> FUNCDEF hybridEqual expression SEMICOLON','statement',4,'p_statement_hybrid_equal','yacc_parser.py',183),
  ('hybridEqual -> PLUSEQUAL','hybridEqual',1,'p_hybridEqual','yacc_parser.py',227),
  ('hybridEqual -> MINUSEQUAL','hybridEqual',1,'p_hybridEqual','yacc_parser.py',228),
  ('hybridEqual -> DIVEQUAL','hybridEqual',1,'p_hybridEqual','yacc_parser.py',229),
  ('hybridEqual -> MULEQUAL','hybridEqual',1,'p_hybridEqual','yacc_parser.py',230),
  ('simpleExpression -> simpleExpression LOGICOROPS andExpression','simpleExpression',3,'p_simpleExpression','yacc_parser.py',236),
  ('simpleExpression -> andExpression','simpleExpression',1,'p_simpleExpression_to_andExpression','yacc_parser.py',246),
  ('andExpression -> andExpression LOGICANDOPS relExpression','andExpression',3,'p_andExpression','yacc_parser.py',251),
  ('andExpression -> relExpression','andExpression',1,'p_andExpression_to_relExpression','yacc_parser.py',261),
  ('relExpression -> expression GREATERTHAN expression','relExpression',3,'p_relExpression_greater','yacc_parser.py',266),
  ('relExpression -> expression GREATERTHANEQUAL expression','relExpression',3,'p_relExpression_greaterequal','yacc_parser.py',277),
  ('relExpression -> expression LESSTHAN expression','relExpression',3,'p_relExpression_less','yacc_parser.py',287),
  ('relExpression -> expression LESSTHANEQUAL expression','relExpression',3,'p_relExpression_lessequal','yacc_parser.py',297),
  ('relExpression -> expression EQUALEQUAL expression','relExpression',3,'p_relExpression_equalequal','yacc_parser.py',308),
  ('relExpression -> expression NOTEQUAL expression','relExpression',3,'p_relExpression_notequal','yacc_parser.py',319),
  ('relExpression -> expression','relExpression',1,'p_relExpression_to_expression','yacc_parser.py',329),
  ('expression -> expression PLUS terms','expression',3,'p_expression_plus','yacc_parser.py',334),
  ('expression -> expression MINUS terms','expression',3,'p_expression_minus','yacc_parser.py',341),
  ('expression -> terms','expression',1,'p_expression_terms','yacc_parser.py',348),
  ('terms -> terms MUL factor','terms',3,'p_terms_mul','yacc_parser.py',355),
  ('terms -> terms DIV factor','terms',3,'p_terms_div','yacc_parser.py',362),
  ('terms -> terms MOD factor','terms',3,'p_terms_mod','yacc_parser.py',369),
  ('terms -> factor','terms',1,'p_terms_factor','yacc_parser.py',375),
  ('factor -> NUMBER','factor',1,'p_factor_number','yacc_parser.py',382),
  ('factor -> FUNCDEF','factor',1,'p_factor_funcdef','yacc_parser.py',388),
  ('factor -> LBRACKET expression RBRACKET','factor',3,'p_terms_factor_group','yacc_parser.py',400),
  ('type -> INTTYPE','type',1,'p_typedef','yacc_parser.py',408),
  ('type -> FLOATTYPE','type',1,'p_typedef','yacc_parser.py',409),
  ('type -> DOUBLETYPE','type',1,'p_typedef','yacc_parser.py',410),
  ('type -> VOIDTYPE','type',1,'p_typedef','yacc_parser.py',411),
  ('type -> BOOLTYPE','type',1,'p_typedef','yacc_parser.py',412),
  ('empty -> <empty>','empty',0,'p_empty','yacc_parser.py',418),
  ('ifstart -> empty','ifstart',1,'p_if_start','yacc_parser.py',422),
  ('ifend -> empty','ifend',1,'p_if_end','yacc_parser.py',426),
  ('elsestart -> empty','elsestart',1,'p_else_start','yacc_parser.py',430),
  ('elseend -> empty','elseend',1,'p_else_end','yacc_parser.py',435),
]
